{% set name = "conda-forge-ci-setup" %}
{% set version = "3.21.1" %}
{% set build = 0 %}
{% set cuda_compiler_version = cuda_compiler_version or "None" %}
{% if cuda_compiler_version == "None" %}
# prioritize non-CUDA variant via build number
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  path: .

build:
  number: {{ build }}
  script:
    - cp {{ os.environ["FEEDSTOCK_ROOT"] }}/LICENSE.txt ${RECIPE_DIR}/LICENSE.txt            # [linux]
    - cp ${RECIPE_DIR}/../LICENSE.txt ${RECIPE_DIR}/LICENSE.txt                              # [osx]
    - COPY "%RECIPE_DIR%\\..\\LICENSE.txt" "%RECIPE_DIR%\\LICENSE.txt"                       # [win]
    - if not exist "%LIBRARY_BIN%" mkdir "%LIBRARY_BIN%"                                                                 # [win]
    - mkdir -p "${PREFIX}/bin"                                                                                           # [unix]
    - COPY "%RECIPE_DIR%\\run_conda_forge_build_setup_win.bat" "%SCRIPTS%\\run_conda_forge_build_setup.bat"              # [win]
    - COPY "%RECIPE_DIR%\\SetPageFileSize.ps1" "%SCRIPTS%\\SetPageFileSize.ps1"                                          # [win]
    - cp "${RECIPE_DIR}/run_conda_forge_build_setup_osx" "${PREFIX}/bin/run_conda_forge_build_setup"                     # [osx]
    - cp "${RECIPE_DIR}/run_conda_forge_build_setup_linux" "${PREFIX}/bin/run_conda_forge_build_setup"                   # [linux]
    - cp "${RECIPE_DIR}/download_osx_sdk.sh" "${PREFIX}/bin/download_osx_sdk.sh"                                         # [unix]
    - cp "${RECIPE_DIR}/cross_compile_support.sh" "${PREFIX}/bin/cross_compile_support.sh"                               # [unix]
    - COPY "%RECIPE_DIR%\\install_cuda.bat" "%SCRIPTS%\\install_cuda.bat"                                                # [win]
    - cd "%RECIPE_DIR%"   # [win]
    - cd "${RECIPE_DIR}"  # [unix]
    - "{{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv"
    - echo "${RECIPE_DIR}"
  entry_points:
    - ff_ci_pr_build = conda_forge_ci_setup.ff_ci_pr_build:main
    - upload_or_check_non_existence = conda_forge_ci_setup.upload_or_check_non_existence:main
    - setup_conda_rc = conda_forge_ci_setup.build_utils:setup_conda_rc
    - upload_package = conda_forge_ci_setup.build_utils:upload_package
    - mangle_compiler = conda_forge_ci_setup.build_utils:mangle_compiler
    - make_build_number = conda_forge_ci_setup.build_utils:make_build_number
    - mangle_homebrew = conda_forge_ci_setup.mangle_homebrew:main
    - validate_recipe_outputs = conda_forge_ci_setup.feedstock_outputs:main
  skip: True  # [py2k]
  ignore_run_exports_from:
    - {{ compiler('cuda') }}              # [cuda_compiler_version != "None"]
    - {{ compiler('c') }}                 # [cuda_compiler_version != "None"]

requirements:
  build:
     # ensure that all variants of cuda_compiler_version are tested
    - {{ compiler('cuda') }}              # [cuda_compiler_version != "None"]
    - {{ compiler('c') }}                 # [cuda_compiler_version != "None"]
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
  host:
    - python
    - pip
  run:
    - python
    - conda >=4.3
    - conda-env
    - click
    - jinja2
    - anaconda-client
    - conda-build 3.*
    - shyaml
    - jq  # [unix]
    - requests
    - ruamel_yaml
    - pip
    - pyyaml
    - m2-git  # [win]
    - git     # [unix]
  run_constrained:
    - boa >=0.8,<1.0

test:
  commands:
    - if not exist "%PREFIX%\\Scripts\\run_conda_forge_build_setup.bat" exit 1    # [win]
    - test -f "${PREFIX}/bin/run_conda_forge_build_setup"                         # [unix]
    - ff_ci_pr_build --help
    - upload_or_check_non_existence --help
    - setup_conda_rc --help
    - upload_package --help
    - make_build_number --help
    - mangle_homebrew --help
    - validate_recipe_outputs --help


about:
  home: https://github.com/conda-forge/conda-forge-ci-setup-feedstock
  summary: A package installed by conda-forge each time a build is run on CI. This package has side-effects to your conda config.
  license: BSD-3-Clause
  license_file: LICENSE.txt

extra:
  recipe-maintainers:
    - conda-forge/core
